/* tslint:disable */
/* eslint-disable */
/**
 * incident.io
 * This is the API reference for incident.io.  It documents available API endpoints, provides examples of how to use it, and instructions around things like authentication and error handling.  The API is hosted at:  - https://api.incident.io/  And you will need to create an API key via your [incident.io dashboard](https://app.incident.io/settings/api-keys) to make requests.  # Making requests  Here are the key concepts required to make requests to the incident.io API.  ## Authentication  For all requests made to the incident.io API, you\'ll need an API key.  To create an API key, head to the incident dashboard and visit [API keys](https://app.incident.io/settings/api-keys). When you create the key, you\'ll be able to choose what actions it can take for your account: choose carefully, as those roles can only be set when you first create the key. We\'ll only show you the token once, so make sure you store it somewhere safe.  Once you have the key, you should make requests to the API that set the `Authorization` request header using a \"Bearer\" authentication scheme:  ``` Authorization: Bearer <YOUR_API_KEY> ```  ## Errors  We use standard HTTP response codes to indicate the status or failure of API requests.  The API response body will be JSON, and contain more detailed information on the nature of the error.  An example error when a request is made without an API key:  ```json {   \"type\": \"authentication_error\",   \"status\": 401,   \"request_id\": \"8e3cc412-b49d-4957-9073-2c19d2c61804\",   \"errors\": [     {       \"code\": \"missing_authorization_material\",       \"message\": \"No authorization material provided in request\"     }   ] } ```  Note that the error:  - Contains the HTTP status (`401`) - References the type of error (`authentication_error`) - Includes a `request_id` that can be provided to incident.io support to help  debug questions with your API request - Provides a list of individual errors, which go into detail about why the error  occurred  The most common error will be a 422 Validation Error, which is returned when the request was rejected due to failing validations.  These errors look like this:  ```json {   \"type\": \"validation_error\",   \"status\": 422,   \"request_id\": \"631766c4-4afd-4803-997c-cd700928fa4b\",   \"errors\": [     {       \"code\": \"is_required\",       \"message\": \"A severity is required to open an incident\",       \"source\": {         \"field\": \"severity_id\"       }     }   ] } ```  This error is caused by not providing a severity identifier, which should be at the `severity_id` field of the request payload. Errors like these can be mapped to forms, should you be integrating with the API from a user-interface.  ## Compatibility  We won\'t make breaking changes to existing API services or endpoints, but will expect integrators to upgrade themselves to the latest API endpoints within 3 months of us deprecating the old service.  We will make changes that are considered backwards compatible, which include:  - Adding new API endpoints and services - Adding new properties to responses from existing API endpoints - Reordering properties returned from existing API endpoints - Adding optional request parameters to existing API endpoints - Altering the format or length of IDs - Adding new values to enums  It is important that clients are robust to these changes, to ensure reliable integrations.  As an example, if you are generating a client using an openapi-generator, ensure the generated client is configured to support unknown enum values, often configured via the `enumUnknownDefaultCase` parameter.  When breaking changes are unavoidable, we\'ll create a new service version on a separate path, and run them in parallel.  For example:  - https://api.incident.io/v1/incidents - https://api.incident.io/v2/incidents  For any questions, email support@incident.io. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomFieldEntryPayloadV1 } from './CustomFieldEntryPayloadV1';
import {
    CustomFieldEntryPayloadV1FromJSON,
    CustomFieldEntryPayloadV1FromJSONTyped,
    CustomFieldEntryPayloadV1ToJSON,
} from './CustomFieldEntryPayloadV1';
import type { IncidentRoleAssignmentPayloadV2 } from './IncidentRoleAssignmentPayloadV2';
import {
    IncidentRoleAssignmentPayloadV2FromJSON,
    IncidentRoleAssignmentPayloadV2FromJSONTyped,
    IncidentRoleAssignmentPayloadV2ToJSON,
} from './IncidentRoleAssignmentPayloadV2';
import type { IncidentTimestampValuePayloadV2 } from './IncidentTimestampValuePayloadV2';
import {
    IncidentTimestampValuePayloadV2FromJSON,
    IncidentTimestampValuePayloadV2FromJSONTyped,
    IncidentTimestampValuePayloadV2ToJSON,
} from './IncidentTimestampValuePayloadV2';
import type { RetrospectiveIncidentOptionsV2 } from './RetrospectiveIncidentOptionsV2';
import {
    RetrospectiveIncidentOptionsV2FromJSON,
    RetrospectiveIncidentOptionsV2FromJSONTyped,
    RetrospectiveIncidentOptionsV2ToJSON,
} from './RetrospectiveIncidentOptionsV2';

/**
 * 
 * @export
 * @interface CreateRequestBody7
 */
export interface CreateRequestBody7 {
    /**
     * Set the incident's custom fields to these values
     * @type {Array<CustomFieldEntryPayloadV1>}
     * @memberof CreateRequestBody7
     */
    custom_field_entries?: Array<CustomFieldEntryPayloadV1>;
    /**
     * Unique identifier for the incident
     * @type {string}
     * @memberof CreateRequestBody7
     */
    id?: string;
    /**
     * Unique string used to de-duplicate incident create requests
     * @type {string}
     * @memberof CreateRequestBody7
     */
    idempotency_key: string;
    /**
     * Assign incident roles to these people
     * @type {Array<IncidentRoleAssignmentPayloadV2>}
     * @memberof CreateRequestBody7
     */
    incident_role_assignments?: Array<IncidentRoleAssignmentPayloadV2>;
    /**
     * Incident status to assign to the incident
     * @type {string}
     * @memberof CreateRequestBody7
     */
    incident_status_id?: string;
    /**
     * Assign the incident's timestamps to these values
     * @type {Array<IncidentTimestampValuePayloadV2>}
     * @memberof CreateRequestBody7
     */
    incident_timestamp_values?: Array<IncidentTimestampValuePayloadV2>;
    /**
     * Incident type to create this incident as
     * @type {string}
     * @memberof CreateRequestBody7
     */
    incident_type_id?: string;
    /**
     * Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
     * @type {string}
     * @memberof CreateRequestBody7
     */
    mode?: CreateRequestBody7ModeEnum;
    /**
     * Explanation of the incident
     * @type {string}
     * @memberof CreateRequestBody7
     */
    name?: string;
    /**
     * 
     * @type {RetrospectiveIncidentOptionsV2}
     * @memberof CreateRequestBody7
     */
    retrospective_incident_options?: RetrospectiveIncidentOptionsV2;
    /**
     * Severity to create incident as
     * @type {string}
     * @memberof CreateRequestBody7
     */
    severity_id?: string;
    /**
     * Slack Team to create the incident in
     * @type {string}
     * @memberof CreateRequestBody7
     */
    slack_team_id?: string;
    /**
     * Detailed description of the incident
     * @type {string}
     * @memberof CreateRequestBody7
     */
    summary?: string;
    /**
     * Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
     * @type {string}
     * @memberof CreateRequestBody7
     */
    visibility: CreateRequestBody7VisibilityEnum;
}


/**
 * @export
 */
export const CreateRequestBody7ModeEnum = {
    Standard: 'standard',
    Retrospective: 'retrospective',
    Test: 'test',
    Tutorial: 'tutorial'
} as const;
export type CreateRequestBody7ModeEnum = typeof CreateRequestBody7ModeEnum[keyof typeof CreateRequestBody7ModeEnum];

/**
 * @export
 */
export const CreateRequestBody7VisibilityEnum = {
    Public: 'public',
    Private: 'private'
} as const;
export type CreateRequestBody7VisibilityEnum = typeof CreateRequestBody7VisibilityEnum[keyof typeof CreateRequestBody7VisibilityEnum];


/**
 * Check if a given object implements the CreateRequestBody7 interface.
 */
export function instanceOfCreateRequestBody7(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "idempotency_key" in value;
    isInstance = isInstance && "visibility" in value;

    return isInstance;
}

export function CreateRequestBody7FromJSON(json: any): CreateRequestBody7 {
    return CreateRequestBody7FromJSONTyped(json, false);
}

export function CreateRequestBody7FromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateRequestBody7 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'custom_field_entries': !exists(json, 'custom_field_entries') ? undefined : ((json['custom_field_entries'] as Array<any>).map(CustomFieldEntryPayloadV1FromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idempotency_key': json['idempotency_key'],
        'incident_role_assignments': !exists(json, 'incident_role_assignments') ? undefined : ((json['incident_role_assignments'] as Array<any>).map(IncidentRoleAssignmentPayloadV2FromJSON)),
        'incident_status_id': !exists(json, 'incident_status_id') ? undefined : json['incident_status_id'],
        'incident_timestamp_values': !exists(json, 'incident_timestamp_values') ? undefined : ((json['incident_timestamp_values'] as Array<any>).map(IncidentTimestampValuePayloadV2FromJSON)),
        'incident_type_id': !exists(json, 'incident_type_id') ? undefined : json['incident_type_id'],
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'retrospective_incident_options': !exists(json, 'retrospective_incident_options') ? undefined : RetrospectiveIncidentOptionsV2FromJSON(json['retrospective_incident_options']),
        'severity_id': !exists(json, 'severity_id') ? undefined : json['severity_id'],
        'slack_team_id': !exists(json, 'slack_team_id') ? undefined : json['slack_team_id'],
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'visibility': json['visibility'],
    };
}

export function CreateRequestBody7ToJSON(value?: CreateRequestBody7 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'custom_field_entries': value.custom_field_entries === undefined ? undefined : ((value.custom_field_entries as Array<any>).map(CustomFieldEntryPayloadV1ToJSON)),
        'id': value.id,
        'idempotency_key': value.idempotency_key,
        'incident_role_assignments': value.incident_role_assignments === undefined ? undefined : ((value.incident_role_assignments as Array<any>).map(IncidentRoleAssignmentPayloadV2ToJSON)),
        'incident_status_id': value.incident_status_id,
        'incident_timestamp_values': value.incident_timestamp_values === undefined ? undefined : ((value.incident_timestamp_values as Array<any>).map(IncidentTimestampValuePayloadV2ToJSON)),
        'incident_type_id': value.incident_type_id,
        'mode': value.mode,
        'name': value.name,
        'retrospective_incident_options': RetrospectiveIncidentOptionsV2ToJSON(value.retrospective_incident_options),
        'severity_id': value.severity_id,
        'slack_team_id': value.slack_team_id,
        'summary': value.summary,
        'visibility': value.visibility,
    };
}

