/* tslint:disable */
/* eslint-disable */
/**
 * incident.io
 * This is the API reference for incident.io.  It documents available API endpoints, provides examples of how to use it, and instructions around things like authentication and error handling.  The API is hosted at:  - https://api.incident.io/  And you will need to create an API key via your [incident.io dashboard](https://app.incident.io/settings/api-keys) to make requests.  # Making requests  Here are the key concepts required to make requests to the incident.io API.  ## Authentication  For all requests made to the incident.io API, you\'ll need an API key.  To create an API key, head to the incident dashboard and visit [API keys](https://app.incident.io/settings/api-keys). When you create the key, you\'ll be able to choose what actions it can take for your account: choose carefully, as those roles can only be set when you first create the key. We\'ll only show you the token once, so make sure you store it somewhere safe.  Once you have the key, you should make requests to the API that set the `Authorization` request header using a \"Bearer\" authentication scheme:  ``` Authorization: Bearer <YOUR_API_KEY> ```  ## Errors  We use standard HTTP response codes to indicate the status or failure of API requests.  The API response body will be JSON, and contain more detailed information on the nature of the error.  An example error when a request is made without an API key:  ```json {   \"type\": \"authentication_error\",   \"status\": 401,   \"request_id\": \"8e3cc412-b49d-4957-9073-2c19d2c61804\",   \"errors\": [     {       \"code\": \"missing_authorization_material\",       \"message\": \"No authorization material provided in request\"     }   ] } ```  Note that the error:  - Contains the HTTP status (`401`) - References the type of error (`authentication_error`) - Includes a `request_id` that can be provided to incident.io support to help  debug questions with your API request - Provides a list of individual errors, which go into detail about why the error  occurred  The most common error will be a 422 Validation Error, which is returned when the request was rejected due to failing validations.  These errors look like this:  ```json {   \"type\": \"validation_error\",   \"status\": 422,   \"request_id\": \"631766c4-4afd-4803-997c-cd700928fa4b\",   \"errors\": [     {       \"code\": \"is_required\",       \"message\": \"A severity is required to open an incident\",       \"source\": {         \"field\": \"severity_id\"       }     }   ] } ```  This error is caused by not providing a severity identifier, which should be at the `severity_id` field of the request payload. Errors like these can be mapped to forms, should you be integrating with the API from a user-interface.  ## Compatibility  We won\'t make breaking changes to existing API services or endpoints, but will expect integrators to upgrade themselves to the latest API endpoints within 3 months of us deprecating the old service.  We will make changes that are considered backwards compatible, which include:  - Adding new API endpoints and services - Adding new properties to responses from existing API endpoints - Reordering properties returned from existing API endpoints - Adding optional request parameters to existing API endpoints - Altering the format or length of IDs - Adding new values to enums  It is important that clients are robust to these changes, to ensure reliable integrations.  As an example, if you are generating a client using an openapi-generator, ensure the generated client is configured to support unknown enum values, often configured via the `enumUnknownDefaultCase` parameter.  When breaking changes are unavoidable, we\'ll create a new service version on a separate path, and run them in parallel.  For example:  - https://api.incident.io/v1/incidents - https://api.incident.io/v2/incidents  For any questions, email support@incident.io. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEntryRequestBody,
  CreateEntryResponseBody,
  CreateTypeRequestBody,
  CreateTypeResponseBody,
  ListEntriesResponseBody,
  ListResourcesResponseBody,
  ListTypesResponseBody,
  ShowEntryResponseBody,
  UpdateEntryRequestBody,
  UpdateTypeRequestBody,
  UpdateTypeSchemaRequestBody,
} from '../models';
import {
    CreateEntryRequestBodyFromJSON,
    CreateEntryRequestBodyToJSON,
    CreateEntryResponseBodyFromJSON,
    CreateEntryResponseBodyToJSON,
    CreateTypeRequestBodyFromJSON,
    CreateTypeRequestBodyToJSON,
    CreateTypeResponseBodyFromJSON,
    CreateTypeResponseBodyToJSON,
    ListEntriesResponseBodyFromJSON,
    ListEntriesResponseBodyToJSON,
    ListResourcesResponseBodyFromJSON,
    ListResourcesResponseBodyToJSON,
    ListTypesResponseBodyFromJSON,
    ListTypesResponseBodyToJSON,
    ShowEntryResponseBodyFromJSON,
    ShowEntryResponseBodyToJSON,
    UpdateEntryRequestBodyFromJSON,
    UpdateEntryRequestBodyToJSON,
    UpdateTypeRequestBodyFromJSON,
    UpdateTypeRequestBodyToJSON,
    UpdateTypeSchemaRequestBodyFromJSON,
    UpdateTypeSchemaRequestBodyToJSON,
} from '../models';

export interface CatalogV2CreateEntryRequest {
    createEntryRequestBody: CreateEntryRequestBody;
}

export interface CatalogV2CreateTypeRequest {
    createTypeRequestBody: CreateTypeRequestBody;
}

export interface CatalogV2DestroyEntryRequest {
    id: string;
}

export interface CatalogV2DestroyTypeRequest {
    id: string;
}

export interface CatalogV2ListEntriesRequest {
    catalogTypeId: string;
    pageSize?: number;
    after?: string;
}

export interface CatalogV2ShowEntryRequest {
    id: string;
}

export interface CatalogV2ShowTypeRequest {
    id: string;
}

export interface CatalogV2UpdateEntryRequest {
    id: string;
    updateEntryRequestBody: UpdateEntryRequestBody;
}

export interface CatalogV2UpdateTypeRequest {
    id: string;
    updateTypeRequestBody: UpdateTypeRequestBody;
}

export interface CatalogV2UpdateTypeSchemaRequest {
    id: string;
    updateTypeSchemaRequestBody: UpdateTypeSchemaRequestBody;
}

/**
 * 
 */
export class CatalogV2Api extends runtime.BaseAPI {

    /**
     * Create an entry for a type in the catalog.
     * CreateEntry Catalog V2
     */
    async catalogV2CreateEntryRaw(requestParameters: CatalogV2CreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEntryResponseBody>> {
        if (requestParameters.createEntryRequestBody === null || requestParameters.createEntryRequestBody === undefined) {
            throw new runtime.RequiredError('createEntryRequestBody','Required parameter requestParameters.createEntryRequestBody was null or undefined when calling catalogV2CreateEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/catalog_entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEntryRequestBodyToJSON(requestParameters.createEntryRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEntryResponseBodyFromJSON(jsonValue));
    }

    /**
     * Create an entry for a type in the catalog.
     * CreateEntry Catalog V2
     */
    async catalogV2CreateEntry(requestParameters: CatalogV2CreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEntryResponseBody> {
        const response = await this.catalogV2CreateEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a catalog type.
     * CreateType Catalog V2
     */
    async catalogV2CreateTypeRaw(requestParameters: CatalogV2CreateTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTypeResponseBody>> {
        if (requestParameters.createTypeRequestBody === null || requestParameters.createTypeRequestBody === undefined) {
            throw new runtime.RequiredError('createTypeRequestBody','Required parameter requestParameters.createTypeRequestBody was null or undefined when calling catalogV2CreateType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/catalog_types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTypeRequestBodyToJSON(requestParameters.createTypeRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTypeResponseBodyFromJSON(jsonValue));
    }

    /**
     * Create a catalog type.
     * CreateType Catalog V2
     */
    async catalogV2CreateType(requestParameters: CatalogV2CreateTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTypeResponseBody> {
        const response = await this.catalogV2CreateTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Archives a catalog entry.
     * DestroyEntry Catalog V2
     */
    async catalogV2DestroyEntryRaw(requestParameters: CatalogV2DestroyEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling catalogV2DestroyEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/catalog_entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archives a catalog entry.
     * DestroyEntry Catalog V2
     */
    async catalogV2DestroyEntry(requestParameters: CatalogV2DestroyEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.catalogV2DestroyEntryRaw(requestParameters, initOverrides);
    }

    /**
     * Archives a catalog type and associated entries.
     * DestroyType Catalog V2
     */
    async catalogV2DestroyTypeRaw(requestParameters: CatalogV2DestroyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling catalogV2DestroyType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/catalog_types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archives a catalog type and associated entries.
     * DestroyType Catalog V2
     */
    async catalogV2DestroyType(requestParameters: CatalogV2DestroyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.catalogV2DestroyTypeRaw(requestParameters, initOverrides);
    }

    /**
     * List entries for a catalog type.
     * ListEntries Catalog V2
     */
    async catalogV2ListEntriesRaw(requestParameters: CatalogV2ListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListEntriesResponseBody>> {
        if (requestParameters.catalogTypeId === null || requestParameters.catalogTypeId === undefined) {
            throw new runtime.RequiredError('catalogTypeId','Required parameter requestParameters.catalogTypeId was null or undefined when calling catalogV2ListEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.catalogTypeId !== undefined) {
            queryParameters['catalog_type_id'] = requestParameters.catalogTypeId;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/catalog_entries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEntriesResponseBodyFromJSON(jsonValue));
    }

    /**
     * List entries for a catalog type.
     * ListEntries Catalog V2
     */
    async catalogV2ListEntries(requestParameters: CatalogV2ListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListEntriesResponseBody> {
        const response = await this.catalogV2ListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List available engine resources for the catalog
     * ListResources Catalog V2
     */
    async catalogV2ListResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourcesResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/catalog_resources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResourcesResponseBodyFromJSON(jsonValue));
    }

    /**
     * List available engine resources for the catalog
     * ListResources Catalog V2
     */
    async catalogV2ListResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourcesResponseBody> {
        const response = await this.catalogV2ListResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all catalog types for an organisation, including those synced from external resources.
     * ListTypes Catalog V2
     */
    async catalogV2ListTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTypesResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/catalog_types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTypesResponseBodyFromJSON(jsonValue));
    }

    /**
     * List all catalog types for an organisation, including those synced from external resources.
     * ListTypes Catalog V2
     */
    async catalogV2ListTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTypesResponseBody> {
        const response = await this.catalogV2ListTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Show a single catalog entry.
     * ShowEntry Catalog V2
     */
    async catalogV2ShowEntryRaw(requestParameters: CatalogV2ShowEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowEntryResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling catalogV2ShowEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/catalog_entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowEntryResponseBodyFromJSON(jsonValue));
    }

    /**
     * Show a single catalog entry.
     * ShowEntry Catalog V2
     */
    async catalogV2ShowEntry(requestParameters: CatalogV2ShowEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowEntryResponseBody> {
        const response = await this.catalogV2ShowEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show a single catalog type.
     * ShowType Catalog V2
     */
    async catalogV2ShowTypeRaw(requestParameters: CatalogV2ShowTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTypeResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling catalogV2ShowType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/catalog_types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTypeResponseBodyFromJSON(jsonValue));
    }

    /**
     * Show a single catalog type.
     * ShowType Catalog V2
     */
    async catalogV2ShowType(requestParameters: CatalogV2ShowTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTypeResponseBody> {
        const response = await this.catalogV2ShowTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing catalog entry.
     * UpdateEntry Catalog V2
     */
    async catalogV2UpdateEntryRaw(requestParameters: CatalogV2UpdateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowEntryResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling catalogV2UpdateEntry.');
        }

        if (requestParameters.updateEntryRequestBody === null || requestParameters.updateEntryRequestBody === undefined) {
            throw new runtime.RequiredError('updateEntryRequestBody','Required parameter requestParameters.updateEntryRequestBody was null or undefined when calling catalogV2UpdateEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/catalog_entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEntryRequestBodyToJSON(requestParameters.updateEntryRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowEntryResponseBodyFromJSON(jsonValue));
    }

    /**
     * Updates an existing catalog entry.
     * UpdateEntry Catalog V2
     */
    async catalogV2UpdateEntry(requestParameters: CatalogV2UpdateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowEntryResponseBody> {
        const response = await this.catalogV2UpdateEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing catalog type.
     * UpdateType Catalog V2
     */
    async catalogV2UpdateTypeRaw(requestParameters: CatalogV2UpdateTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTypeResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling catalogV2UpdateType.');
        }

        if (requestParameters.updateTypeRequestBody === null || requestParameters.updateTypeRequestBody === undefined) {
            throw new runtime.RequiredError('updateTypeRequestBody','Required parameter requestParameters.updateTypeRequestBody was null or undefined when calling catalogV2UpdateType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/catalog_types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTypeRequestBodyToJSON(requestParameters.updateTypeRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTypeResponseBodyFromJSON(jsonValue));
    }

    /**
     * Updates an existing catalog type.
     * UpdateType Catalog V2
     */
    async catalogV2UpdateType(requestParameters: CatalogV2UpdateTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTypeResponseBody> {
        const response = await this.catalogV2UpdateTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing catalog types schema, adding or removing attributes.
     * UpdateTypeSchema Catalog V2
     */
    async catalogV2UpdateTypeSchemaRaw(requestParameters: CatalogV2UpdateTypeSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTypeResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling catalogV2UpdateTypeSchema.');
        }

        if (requestParameters.updateTypeSchemaRequestBody === null || requestParameters.updateTypeSchemaRequestBody === undefined) {
            throw new runtime.RequiredError('updateTypeSchemaRequestBody','Required parameter requestParameters.updateTypeSchemaRequestBody was null or undefined when calling catalogV2UpdateTypeSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/catalog_types/{id}/actions/update_schema`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTypeSchemaRequestBodyToJSON(requestParameters.updateTypeSchemaRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTypeResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update an existing catalog types schema, adding or removing attributes.
     * UpdateTypeSchema Catalog V2
     */
    async catalogV2UpdateTypeSchema(requestParameters: CatalogV2UpdateTypeSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTypeResponseBody> {
        const response = await this.catalogV2UpdateTypeSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
