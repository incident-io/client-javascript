/* tslint:disable */
/* eslint-disable */
/**
 * incident.io
 * This is the API reference for incident.io.  It documents available API endpoints, provides examples of how to use it, and instructions around things like authentication and error handling.  The API is hosted at:  - https://api.incident.io/  And you will need to create an API key via your [incident.io dashboard](https://app.incident.io/settings/api-keys) to make requests.  # Making requests  Here are the key concepts required to make requests to the incident.io API.  ## Authentication  For all requests made to the incident.io API, you\'ll need an API key.  To create an API key, head to the incident dashboard and visit [API keys](https://app.incident.io/settings/api-keys). When you create the key, you\'ll be able to choose what actions it can take for your account: choose carefully, as those roles can only be set when you first create the key. We\'ll only show you the token once, so make sure you store it somewhere safe.  Once you have the key, you should make requests to the API that set the `Authorization` request header using a \"Bearer\" authentication scheme:  ``` Authorization: Bearer <YOUR_API_KEY> ```  ## Errors  We use standard HTTP response codes to indicate the status or failure of API requests.  The API response body will be JSON, and contain more detailed information on the nature of the error.  An example error when a request is made without an API key:  ```json {   \"type\": \"authentication_error\",   \"status\": 401,   \"request_id\": \"8e3cc412-b49d-4957-9073-2c19d2c61804\",   \"errors\": [     {       \"code\": \"missing_authorization_material\",       \"message\": \"No authorization material provided in request\"     }   ] } ```  Note that the error:  - Contains the HTTP status (`401`) - References the type of error (`authentication_error`) - Includes a `request_id` that can be provided to incident.io support to help  debug questions with your API request - Provides a list of individual errors, which go into detail about why the error  occurred  The most common error will be a 422 Validation Error, which is returned when the request was rejected due to failing validations.  These errors look like this:  ```json {   \"type\": \"validation_error\",   \"status\": 422,   \"request_id\": \"631766c4-4afd-4803-997c-cd700928fa4b\",   \"errors\": [     {       \"code\": \"is_required\",       \"message\": \"A severity is required to open an incident\",       \"source\": {         \"field\": \"severity_id\"       }     }   ] } ```  This error is caused by not providing a severity identifier, which should be at the `severity_id` field of the request payload. Errors like these can be mapped to forms, should you be integrating with the API from a user-interface.  ## Compatibility  We won\'t make breaking changes to existing API services or endpoints, but will expect integrators to upgrade themselves to the latest API endpoints within 3 months of us deprecating the old service.  We will make changes that are considered backwards compatible, which include:  - Adding new API endpoints and services - Adding new properties to responses from existing API endpoints - Reordering properties returned from existing API endpoints - Adding optional request parameters to existing API endpoints - Altering the format or length of IDs - Adding new values to enums  It is important that clients are robust to these changes, to ensure reliable integrations.  As an example, if you are generating a client using an openapi-generator, ensure the generated client is configured to support unknown enum values, often configured via the `enumUnknownDefaultCase` parameter.  When breaking changes are unavoidable, we\'ll create a new service version on a separate path, and run them in parallel.  For example:  - https://api.incident.io/v1/incidents - https://api.incident.io/v2/incidents  For any questions, email support@incident.io. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRequestBody7,
  EditRequestBody,
  ListResponseBody11,
  ShowResponseBody9,
} from '../models';
import {
    CreateRequestBody7FromJSON,
    CreateRequestBody7ToJSON,
    EditRequestBodyFromJSON,
    EditRequestBodyToJSON,
    ListResponseBody11FromJSON,
    ListResponseBody11ToJSON,
    ShowResponseBody9FromJSON,
    ShowResponseBody9ToJSON,
} from '../models';

export interface IncidentsV2CreateRequest {
    createRequestBody7: CreateRequestBody7;
}

export interface IncidentsV2EditRequest {
    id: string;
    editRequestBody: EditRequestBody;
}

export interface IncidentsV2ListRequest {
    pageSize?: number;
    after?: string;
    status?: { [key: string]: Array<string>; };
    severity?: { [key: string]: Array<string>; };
    incidentType?: { [key: string]: Array<string>; };
    incidentRole?: { [key: string]: { [key: string]: Array<string>; }; };
    customField?: { [key: string]: { [key: string]: Array<string>; }; };
}

export interface IncidentsV2ShowRequest {
    id: string;
}

/**
 * 
 */
export class IncidentsV2Api extends runtime.BaseAPI {

    /**
     * Create a new incident.  Note that if the incident mode is set to \"retrospective\" then the new incident will not be announced in Slack. 
     * Create Incidents V2
     */
    async incidentsV2CreateRaw(requestParameters: IncidentsV2CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowResponseBody9>> {
        if (requestParameters.createRequestBody7 === null || requestParameters.createRequestBody7 === undefined) {
            throw new runtime.RequiredError('createRequestBody7','Required parameter requestParameters.createRequestBody7 was null or undefined when calling incidentsV2Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/incidents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRequestBody7ToJSON(requestParameters.createRequestBody7),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowResponseBody9FromJSON(jsonValue));
    }

    /**
     * Create a new incident.  Note that if the incident mode is set to \"retrospective\" then the new incident will not be announced in Slack. 
     * Create Incidents V2
     */
    async incidentsV2Create(requestParameters: IncidentsV2CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowResponseBody9> {
        const response = await this.incidentsV2CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing incident.  This endpoint allows you to edit the properties of an existing incident: e.g. set the severity or update custom fields.  When using this endpoint, only fields that are provided will be edited (omitted fields  will be ignored). 
     * Edit Incidents V2
     */
    async incidentsV2EditRaw(requestParameters: IncidentsV2EditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowResponseBody9>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling incidentsV2Edit.');
        }

        if (requestParameters.editRequestBody === null || requestParameters.editRequestBody === undefined) {
            throw new runtime.RequiredError('editRequestBody','Required parameter requestParameters.editRequestBody was null or undefined when calling incidentsV2Edit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/incidents/{id}/actions/edit`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditRequestBodyToJSON(requestParameters.editRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowResponseBody9FromJSON(jsonValue));
    }

    /**
     * Edit an existing incident.  This endpoint allows you to edit the properties of an existing incident: e.g. set the severity or update custom fields.  When using this endpoint, only fields that are provided will be edited (omitted fields  will be ignored). 
     * Edit Incidents V2
     */
    async incidentsV2Edit(requestParameters: IncidentsV2EditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowResponseBody9> {
        const response = await this.incidentsV2EditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all incidents for an organisation.  This endpoint supports a number of filters, which can help find incidents matching certain criteria.  Filters are provided as query parameters, but due to the dynamic nature of what you can query by (different accounts have different custom fields, statuses, etc) they are more complex than most.  To help, here are some exemplar curl requests with a human description of what they search for.  Note that: - Filters may be used together, and the result will be incidents that match all filters. - IDs are normally in UUID format, but have been replaced with shorter strings to improve readability. - All query parameters must be URI encoded.  ### By status  With status of id=ABC, find all incidents that are set to that status:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'status[one_of]=ABC\'  Or all incidents that are not set to status with id=ABC:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'status[not_in]=ABC\'  ### By severity  With severity of id=ABC, find all incidents that are set to that severity:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'severity[one_of]=ABC\'  Or all incidents where severity rank is greater-than-or-equal-to the rank of severity id=ABC:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'severity[gte]=ABC\'  Or all incidents where severity rank is less-than-or-equal-to the rank of severity id=ABC:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'severity[lte]=ABC\'  ### By incident type  With incident type of id=ABC, find all incidents that are of that type:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'incident_type[one_of]=ABC\'  Or all incidents not of that type:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'incident_type[not_in]=ABC\'  ### By incident role  Roles and custom fields have another nested layer in the query parameter, to account for operations against any of the roles or custom fields created in the account.  With incident role id=ABC, find all incidents where that role is unset:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'incident_role[ABC][is_blank]=true\'  Or where the role has been set:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'incident_role[ABC][is_blank]=false\'  ### By option custom fields  With an option custom field id=ABC, all incidents that have field ABC set to the custom field option of id=XYZ:    curl \\    --get \'https://api.incident.io/v2/incidents\' \\    --data \'custom_field[ABC][one_of]=XYZ\'  Or all incidents that do not have custom field id=ABC set to option id=XYZ:    curl \\    --get \'https://api.incident.io/v2/incidents\' \\    --data \'custom_field[ABC][not_in]=XYZ\' 
     * List Incidents V2
     */
    async incidentsV2ListRaw(requestParameters: IncidentsV2ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseBody11>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.severity !== undefined) {
            queryParameters['severity'] = requestParameters.severity;
        }

        if (requestParameters.incidentType !== undefined) {
            queryParameters['incident_type'] = requestParameters.incidentType;
        }

        if (requestParameters.incidentRole !== undefined) {
            queryParameters['incident_role'] = requestParameters.incidentRole;
        }

        if (requestParameters.customField !== undefined) {
            queryParameters['custom_field'] = requestParameters.customField;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/incidents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseBody11FromJSON(jsonValue));
    }

    /**
     * List all incidents for an organisation.  This endpoint supports a number of filters, which can help find incidents matching certain criteria.  Filters are provided as query parameters, but due to the dynamic nature of what you can query by (different accounts have different custom fields, statuses, etc) they are more complex than most.  To help, here are some exemplar curl requests with a human description of what they search for.  Note that: - Filters may be used together, and the result will be incidents that match all filters. - IDs are normally in UUID format, but have been replaced with shorter strings to improve readability. - All query parameters must be URI encoded.  ### By status  With status of id=ABC, find all incidents that are set to that status:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'status[one_of]=ABC\'  Or all incidents that are not set to status with id=ABC:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'status[not_in]=ABC\'  ### By severity  With severity of id=ABC, find all incidents that are set to that severity:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'severity[one_of]=ABC\'  Or all incidents where severity rank is greater-than-or-equal-to the rank of severity id=ABC:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'severity[gte]=ABC\'  Or all incidents where severity rank is less-than-or-equal-to the rank of severity id=ABC:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'severity[lte]=ABC\'  ### By incident type  With incident type of id=ABC, find all incidents that are of that type:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'incident_type[one_of]=ABC\'  Or all incidents not of that type:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'incident_type[not_in]=ABC\'  ### By incident role  Roles and custom fields have another nested layer in the query parameter, to account for operations against any of the roles or custom fields created in the account.  With incident role id=ABC, find all incidents where that role is unset:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'incident_role[ABC][is_blank]=true\'  Or where the role has been set:    curl --get \'https://api.incident.io/v2/incidents\' \\    --data \'incident_role[ABC][is_blank]=false\'  ### By option custom fields  With an option custom field id=ABC, all incidents that have field ABC set to the custom field option of id=XYZ:    curl \\    --get \'https://api.incident.io/v2/incidents\' \\    --data \'custom_field[ABC][one_of]=XYZ\'  Or all incidents that do not have custom field id=ABC set to option id=XYZ:    curl \\    --get \'https://api.incident.io/v2/incidents\' \\    --data \'custom_field[ABC][not_in]=XYZ\' 
     * List Incidents V2
     */
    async incidentsV2List(requestParameters: IncidentsV2ListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseBody11> {
        const response = await this.incidentsV2ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single incident.
     * Show Incidents V2
     */
    async incidentsV2ShowRaw(requestParameters: IncidentsV2ShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowResponseBody9>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling incidentsV2Show.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/incidents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowResponseBody9FromJSON(jsonValue));
    }

    /**
     * Get a single incident.
     * Show Incidents V2
     */
    async incidentsV2Show(requestParameters: IncidentsV2ShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowResponseBody9> {
        const response = await this.incidentsV2ShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
